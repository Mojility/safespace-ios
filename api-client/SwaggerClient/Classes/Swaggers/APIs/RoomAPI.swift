//
// RoomAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class RoomAPI: APIBase {
    /**
     Retrieve posts and infractions
     
     - parameter roomId: (path) The room id for which posts and infractions will be returned 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roomRoomIdGet(roomId: Int32, completion: @escaping ((_ data: PostsAndInfractions?,_ error: Error?) -> Void)) {
        roomRoomIdGetWithRequestBuilder(roomId: roomId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve posts and infractions
     - GET /room/{roomId}
     - Retrieve all or outstanding messages and available infraction notes for a room.
     - examples: [{contentType=application/json, example={
  "infractions" : [ {
    "id" : 123,
    "label" : "aeiou"
  } ],
  "posts" : [ {
    "emotes" : [ {
      "quantity" : 123,
      "id" : 123
    } ],
    "handle" : "aeiou",
    "infractions" : [ {
      "quantity" : 123,
      "id" : 123
    } ],
    "id" : 123,
    "body" : "aeiou"
  } ]
}}]
     
     - parameter roomId: (path) The room id for which posts and infractions will be returned 

     - returns: RequestBuilder<PostsAndInfractions> 
     */
    open class func roomRoomIdGetWithRequestBuilder(roomId: Int32) -> RequestBuilder<PostsAndInfractions> {
        var path = "/room/{roomId}"
        path = path.replacingOccurrences(of: "{roomId}", with: "\(roomId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<PostsAndInfractions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Rate an infraction
     
     - parameter roomId: (path) The room id containing the infraction 
     - parameter infractionId: (path) The infraction id to be rated 
     - parameter rating: (form) The rating to apply to the infraction 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roomRoomIdInfractionInfractionIdRatePost(roomId: Int32, infractionId: Int32, rating: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        roomRoomIdInfractionInfractionIdRatePostWithRequestBuilder(roomId: roomId, infractionId: infractionId, rating: rating).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Rate an infraction
     - POST /room/{roomId}/infraction/{infractionId}/rate
     - Apply a rating to an infraction
     
     - parameter roomId: (path) The room id containing the infraction 
     - parameter infractionId: (path) The infraction id to be rated 
     - parameter rating: (form) The rating to apply to the infraction 

     - returns: RequestBuilder<Void> 
     */
    open class func roomRoomIdInfractionInfractionIdRatePostWithRequestBuilder(roomId: Int32, infractionId: Int32, rating: Int32) -> RequestBuilder<Void> {
        var path = "/room/{roomId}/infraction/{infractionId}/rate"
        path = path.replacingOccurrences(of: "{roomId}", with: "\(roomId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{infractionId}", with: "\(infractionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "rating": rating.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register a new infraction
     
     - parameter roomId: (path) The room id for the infraction 
     - parameter label: (form) The label of the new infraction 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roomRoomIdInfractionPost(roomId: Int32, label: String, completion: @escaping ((_ error: Error?) -> Void)) {
        roomRoomIdInfractionPostWithRequestBuilder(roomId: roomId, label: label).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Register a new infraction
     - POST /room/{roomId}/infraction
     - Registers a new type of infraction in the room specified
     
     - parameter roomId: (path) The room id for the infraction 
     - parameter label: (form) The label of the new infraction 

     - returns: RequestBuilder<Void> 
     */
    open class func roomRoomIdInfractionPostWithRequestBuilder(roomId: Int32, label: String) -> RequestBuilder<Void> {
        var path = "/room/{roomId}/infraction"
        path = path.replacingOccurrences(of: "{roomId}", with: "\(roomId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "label": label
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post message
     
     - parameter roomId: (path) The room id for which posts and infractions will be returned 
     - parameter body: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roomRoomIdPostPost(roomId: Int32, body: String, completion: @escaping ((_ error: Error?) -> Void)) {
        roomRoomIdPostPostWithRequestBuilder(roomId: roomId, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Post message
     - POST /room/{roomId}/post
     - Post a new message to a room
     
     - parameter roomId: (path) The room id for which posts and infractions will be returned 
     - parameter body: (form)  

     - returns: RequestBuilder<Void> 
     */
    open class func roomRoomIdPostPostWithRequestBuilder(roomId: Int32, body: String) -> RequestBuilder<Void> {
        var path = "/room/{roomId}/post"
        path = path.replacingOccurrences(of: "{roomId}", with: "\(roomId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "body": body
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
