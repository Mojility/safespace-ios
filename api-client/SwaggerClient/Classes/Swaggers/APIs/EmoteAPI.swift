//
// EmoteAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class EmoteAPI: APIBase {
    /**
     Remove emote
     
     - parameter roomId: (path) The room id containing the post 
     - parameter postId: (path) The post id from which the emote will be removed 
     - parameter emoteId: (path) The id of the emote being removed 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roomRoomIdPostPostIdEmoteEmoteIdDelete(roomId: Int32, postId: Int32, emoteId: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        roomRoomIdPostPostIdEmoteEmoteIdDeleteWithRequestBuilder(roomId: roomId, postId: postId, emoteId: emoteId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Remove emote
     - DELETE /room/{roomId}/post/{postId}/emote/{emoteId}
     - Remove a previously posted emote from a message in a room
     
     - parameter roomId: (path) The room id containing the post 
     - parameter postId: (path) The post id from which the emote will be removed 
     - parameter emoteId: (path) The id of the emote being removed 

     - returns: RequestBuilder<Void> 
     */
    open class func roomRoomIdPostPostIdEmoteEmoteIdDeleteWithRequestBuilder(roomId: Int32, postId: Int32, emoteId: Int32) -> RequestBuilder<Void> {
        var path = "/room/{roomId}/post/{postId}/emote/{emoteId}"
        path = path.replacingOccurrences(of: "{roomId}", with: "\(roomId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{postId}", with: "\(postId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{emoteId}", with: "\(emoteId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post emote
     
     - parameter roomId: (path) The room id containing the post 
     - parameter postId: (path) The post id on which the emote will be applied 
     - parameter emoteId: (form) The id of the emote being applied (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roomRoomIdPostPostIdEmotePost(roomId: Int32, postId: Int32, emoteId: Int32? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        roomRoomIdPostPostIdEmotePostWithRequestBuilder(roomId: roomId, postId: postId, emoteId: emoteId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Post emote
     - POST /room/{roomId}/post/{postId}/emote
     - Post a new emote to a message in a room
     
     - parameter roomId: (path) The room id containing the post 
     - parameter postId: (path) The post id on which the emote will be applied 
     - parameter emoteId: (form) The id of the emote being applied (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func roomRoomIdPostPostIdEmotePostWithRequestBuilder(roomId: Int32, postId: Int32, emoteId: Int32? = nil) -> RequestBuilder<Void> {
        var path = "/room/{roomId}/post/{postId}/emote"
        path = path.replacingOccurrences(of: "{roomId}", with: "\(roomId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{postId}", with: "\(postId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "emote_id": emoteId?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
